using System.Threading.Tasks;
using Door2Door_API.Controllers;
using Door2Door_API.Models;
using Door2Door_API.Models.Interfaces;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using Moq;
using Xunit;

namespace Door2Door_API.Test.Unit.Controllers;

public class RoomControllerTest
{
    
    public RoomControllerTest()
    {
    }

    private static readonly RoomType KnownExistingRoomType = new RoomType()
    {
        Id = 1,
        Type = "Classroom"
    };
    
    // Arrange (for multiple)
    private static readonly Room KnownExistingRoom = new Room()
    {
        //Well-Known-Byte (WKB) output from pgAdmin4:
        //0106000020110F000001000000010300000001000000090000001AEBD504D503344122863B79BD665C4149C16EFEDA0334417BD6E444C3665C411ABE06DEED033441BAE362F3C1665C41862AA68DF3033441DD6F9462C7665C414A564535EC03344133F535E8C7665C418F656647F1033441E3D597ABCC665C412761B8F64C0434410CE261B4C6665C41555BFE663B0434413DB6361FB6665C411AEBD504D503344122863B79BD665C41
        //Geometry = new WKBReader(NtsGeometryServices.Instance).Read(
        //    new byte[] { 0x01,0x06,0x00,0x00,0x20,0x11,0x0F,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x1A,0xEB,0xD5,0x04,0xD5,0x03,0x34,0x41,0x22,0x86,0x3B,0x79,0xBD,0x66,0x5C,0x41,0x49,0xC1,0x6E,0xFE,0xDA,0x03,0x34,0x41,0x7B,0xD6,0xE4,0x44,0xC3,0x66,0x5C,0x41,0x1A,0xBE,0x06,0xDE,0xED,0x03,0x34,0x41,0xBA,0xE3,0x62,0xF3,0xC1,0x66,0x5C,0x41,0x86,0x2A,0xA6,0x8D,0xF3,0x03,0x34,0x41,0xDD,0x6F,0x94,0x62,0xC7,0x66,0x5C,0x41,0x4A,0x56,0x45,0x35,0xEC,0x03,0x34,0x41,0x33,0xF5,0x35,0xE8,0xC7,0x66,0x5C,0x41,0x8F,0x65,0x66,0x47,0xF1,0x03,0x34,0x41,0xE3,0xD5,0x97,0xAB,0xCC,0x66,0x5C,0x41,0x27,0x61,0xB8,0xF6,0x4C,0x04,0x34,0x41,0x0C,0xE2,0x61,0xB4,0xC6,0x66,0x5C,0x41,0x55,0x5B,0xFE,0x66,0x3B,0x04,0x34,0x41,0x3D,0xB6,0x36,0x1F,0xB6,0x66,0x5C,0x41,0x1A,0xEB,0xD5,0x04,0xD5,0x03,0x34,0x41,0x22,0x86,0x3B,0x79,0xBD,0x66,0x5C,0x41  }
        //),
        Id = 1,
        Name = "B.26",
        Type = KnownExistingRoomType,
    };
    
    private static IRoomRepository GetMockRoomRepository()
    { 
        var mockRepository = new Mock<IRoomRepository>();
        mockRepository.Setup(m => m.GetByIdAsync(1)).Returns(Task.FromResult(KnownExistingRoom)!);
        return mockRepository.Object;
    }
    
    [Fact]
    public void GetRoomById_ShouldReturnARoomWhenIdIsValid()
    {
        // Arrange
        var controller = new RoomController(GetMockRoomRepository());
        
        // Act
        var room = controller.GetRoomById(KnownExistingRoom.Id);
        
        // Assert
        Assert.Equal(KnownExistingRoom.Id, room.Id);
        Assert.NotNull(room);
    }

    [Fact]
    public async void GetRoomById_ShouldReturn404WhenIdIsInvalid()
    {
        // Arrange
        var controller = new RoomController(GetMockRoomRepository());
        
        // Act
        var task = await controller.GetRoomById(-13839819389); // bogus id.
        
        // Assert
        Assert.IsType<NotFoundObjectResult>(task.Result);
    }
    
}
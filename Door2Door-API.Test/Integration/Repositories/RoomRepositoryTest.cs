using System;
using System.Data;
using Dapper;
using Door2Door_API.Models;
using Door2Door_API.Models.Interfaces;
using Microsoft.Extensions.DependencyInjection;
using Npgsql;
using Xunit;

namespace Door2Door_API.Test.Integration.Repositories;


public class RoomRepositoryTest : IDisposable
{

    private readonly IDbConnection _testConnection;

    private readonly RoomRepository _roomRepository;
    private readonly IFactory<Room> _roomFactory;

    private readonly string _testRunId = Guid.NewGuid().ToString().Replace("-", "");
    
    private static readonly string[] SetupSql =
    {
        "CREATE SCHEMA IF NOT EXISTS run_%testRunId%;",
        "CREATE TABLE IF NOT EXISTS run_%testRunId%.room_type (id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, room_type CHARACTER VARYING(255) NOT NULL);",
        "CREATE TABLE IF NOT EXISTS run_%testRunId%.room (id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, geom public.geometry(MultiPolygon, 3857), room_type bigint CONSTRAINT room_room_type_fk REFERENCES room_type(id), room_name CHARACTER VARYING(128));",
        "TRUNCATE TABLE run_%testRunId%.room CASCADE;",
        "TRUNCATE TABLE run_%testRunId%.room_type CASCADE;",
    };

    private static readonly string[] TeardownSql =
    {
        "DROP SCHEMA IF EXISTS run_%testRunId%;"
    };
    
    public RoomRepositoryTest()
    {
        IFactory<Room> roomFactory;
        var testConnectionString = Environment.GetEnvironmentVariable("testConnectionString");
        
        // Then create a connection to the newly created test database.
        var testDebugConnectionString = $"Server=192.168.1.102;Port=5432;Database=door2door_test;User Id=postgres;Password=12345";
        this._testConnection = new NpgsqlConnection(testDebugConnectionString);
        
        // Setup Services.
        var services = new ServiceCollection();
        services.AddTransient<IFactory<Room>, RoomFactory>();
        var provider = services.BuildServiceProvider();
        
        this._roomFactory = provider.GetService<IFactory<Room>>()!;
        this._roomRepository = new RoomRepository(this._testConnection, this._roomFactory);
    }

    // Sets up an isolated environment for each test
    private void BeforeEach()
    {
        foreach (var query in SetupSql)
        {
            var sql = query.Replace("%testRunId%", _testRunId);
            Console.WriteLine(sql);
            this._testConnection.Execute(sql);
        }
    }
    
    [Fact]
    public async void GetByIdAsync_ShouldReturnNullWhenEntityDoesNotExist()
    {
        // Arrange
        BeforeEach();
        
        // Act
        var room = await _roomRepository.GetByIdAsync(-10330); // bogus id, that for sure does not exist.
        
        // Assert
        Assert.Null(room);
    }
    
    // GetByTypeAsync
    // GetByIdAsync
    // GetAllAsync


    void IDisposable.Dispose()
    {

        foreach (var query in TeardownSql)
        {
            var sql = query.Replace("%testRunId%", _testRunId);
            _testConnection.Execute(sql);
        }
        
        _testConnection.Dispose();
        
        GC.SuppressFinalize(this);
    }
}